# show usage message
$ ./cache-sim
usage: ./cache-sim [-r lru|mru|rand] [-s seed] [-v] s-E-b-m
where s-E-b-m specified cache parameters:
  s: # of bits in address used to specify set
  E: # of cache lines per set
  b: # of bits in address used to specify offset in cache line
  m: total # of bits used to address primary memory
  must have all non-negative and 2 <= b and b + s < m

# run simulator on test data after stripping out #-end-of-line
# commands using manual trace data.
$ sed -e 's/#.*//'  ~/cs220/projects/prj5/extras/lru_2-2-2-8.test | \
    ./cache-sim -v -r lru 2-2-2-8 
10: miss-without-replace
20: miss-without-replace
30: miss-with-replace 10
22: hit
16: miss-without-replace
12: miss-with-replace 30
14: hit
1c: miss-without-replace
2e: miss-without-replace
1f: hit
3d: miss-with-replace 2c
26: miss-without-replace
2a: miss-without-replace
8a: miss-without-replace
7b: miss-with-replace 28
46: miss-with-replace 14
hits: 3/16 (18.75%) hits
misses without replace: 8/16 (50.00%) hits
misses with replace: 5/16 (31.25%) hits

# run simulator on test data after stripping out #-end-of-line
# commands using manual trace data.
$ sed -e 's/#.*//'  ~/cs220/projects/prj5/extras/mru_4-2-8-16.test  | \
    ./cache-sim -v -r mru 4-2-8-16
1000: miss-without-replace
2000: miss-without-replace
3000: miss-with-replace 2000
4a20: miss-without-replace
5a40: miss-without-replace
7a3c: miss-with-replace 5a00
1010: hit
2010: miss-with-replace 1000
1014: miss-with-replace 2000
2014: miss-with-replace 1000
4a2a: hit
4a4b: hit
7ab0: hit
8ab0: miss-with-replace 7a00
aa02: miss-with-replace 8a00
8ab4: miss-with-replace aa00
hits: 4/16 (25.00%) hits
misses without replace: 4/16 (25.00%) hits
misses with replace: 8/16 (50.00%) hits

# show usage message for address-trace generation script
$ $HOME/cs220/projects/prj5/extras/address-trace.rb 
NAME
  address-trace.rb

SYNOPSIS
  address-trace.rb (random|matrix|program) [options]+

PARAMETERS
  --length=length, -l (0 ~> int(length=100)) 
      trace length in units of 1000 
  --base=base, -b (0 ~> int(base=4096)) 
      low base address 
  --mem=mem, -m (0 ~> mem=536870912) 
      total memory size; optional suffix k, m, g 
  --rand=rand, -r (0 ~> int(rand=0)) 
      seed for random number generator 
  --help, -h 
$

# feed address trace of 100,000 accesses by row of 1024x1024 matrix
# into cache-sim print summary of results
$ $HOME/cs220/projects/prj5/extras/address-trace.rb matrix --access=row  | \
    ./cache-sim -r lru  4-4-8-32
hits: 96875/100000 (96.88%) hits
misses without replace: 64/100000 (0.06%) hits
misses with replace: 3061/100000 (3.06%) hits

# feed address trace of 100,000 matrix accesses by row into cache-sim
# print summary of results
$ $HOME/cs220/projects/prj5/extras/address-trace.rb matrix --access=col | \
    ./cache-sim -r lru  4-4-8-32
hits: 0/100000 (0.00%) hits
misses without replace: 16/100000 (0.02%) hits
misses with replace: 99984/100000 (99.98%) hits

# program trace
$ $HOME/cs220/projects/prj5/extras/address-trace.rb program | \
  ./cache-sim -r lru  4-4-8-32
hits: 80265/100000 (80.27%) hits
misses without replace: 64/100000 (0.06%) hits
misses with replace: 19671/100000 (19.67%) hits

# program trace with increased block size
$ $HOME/cs220/projects/prj5/extras/address-trace.rb program | \
  ./cache-sim -r lru  4-4-10-32
hits: 86044/100000 (86.04%) hits
misses without replace: 64/100000 (0.06%) hits
misses with replace: 13892/100000 (13.89%) hits
$

